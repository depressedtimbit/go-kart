class wall{
  PVector pos;
  PVector[] polyPoints;
  float rot;
  
  color wallColor;
  WallType wallType;
  int id;
  
  wall(PVector pos, PVector bbBoxSize, float rot, color wallColor, WallType wallType, int id) {
      this.pos = pos;
      this.rot = rot;
      this.wallColor = wallColor;
      this.wallType = wallType;
      this.id = id;
      polyPoints = bbBoxToPoints(bbBoxSize);
  }



  void draw() {
    pushMatrix();
    translate(pos.x, pos.y);
    rotate(rot);
    fill(wallColor);
    beginShape();
    for (PVector poly : polyPoints) {
      vertex(poly.x, poly.y);
    }
    endShape(CLOSE);
    popMatrix();
  }

  void draw3D() {


  }

  void onCollide(kart collidedKart) {
    if (!KartWallCol(collidedKart.pos, collidedKart.bbBoxSize, collidedKart.rot, polyPoints, pos, rot)) {
      wallColor = color(255, 0, 0);
      return;
    }

    switch (wallType) {
      case WALL:
        wallColor = color(0, 255, 0);
        PVector kartDirection = new PVector(1, 0);
        kartDirection.rotate(collidedKart.rot);

        PVector kart2wall = collidedKart.pos.copy().sub(pos).normalize();

        float kartDot = kart2wall.dot(kartDirection);

        println("dot: ", kartDot);

        if (kartDot < 0) {
          collidedKart.vel = 0;
          collidedKart.blocked = true;
        }
        else {
          collidedKart.blocked = false;
        }
        break;
      case CHECKPOINT:
        if (collidedKart.checkedPoints.contains(id)) {return;}
        if (!collidedKart.checkedPoints.contains(id-1)) {return;}
        
        collidedKart.checkedPoints.add(id);
        break;
      case FINISH:
        if (!collidedKart.checkedPoints.contains(id-1)) {return;}
        collidedKart.finishedRace = true;
        attemptFinish();
    }
  }
  
  boolean KartWallCol(PVector kartPos, PVector kartBoxSize, float kartRot, PVector[] points, PVector pos, float rot) {
      PVector[] kartPoints = bbBoxToPoints(kartBoxSize);
      
      PVector[] kartConvertedPoints = pointsToScreenPoints(kartPoints, kartPos, kartRot);
      PVector[] convertedPoints = pointsToScreenPoints(points, pos, rot);
      
    pushMatrix();
    translate(kartPos.x, kartPos.y);
    rotate(kartRot);
    fill(wallColor);
    beginShape();
    for (PVector poly : kartPoints) {
      vertex(poly.x, poly.y);
    }
    endShape(CLOSE);
    popMatrix();

    noFill();
    stroke(255, 255, 0);
    beginShape();
    for (PVector poly : kartConvertedPoints) {
      vertex(poly.x, poly.y);
    }
    endShape(CLOSE);

    stroke(0, 255, 255);
    beginShape();
    for (PVector poly : convertedPoints) {
      vertex(poly.x, poly.y);
    }
    endShape(CLOSE);
    noStroke();

      if (!polyPoly(convertedPoints, kartConvertedPoints)) {
        return false;
      }
      return true;
  }
}
